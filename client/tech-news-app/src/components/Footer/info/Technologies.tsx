import React, {useContext} from 'react'
import {AppThemeContext, ThemeContext} from '../../../context/ThemeContext'
import reactLogo from '../../../static/react-logo.png'
import springLogo from '../../../static/spring-logo.png'
import {NavLink} from 'react-router-dom'

const Technologies: React.FC = () => {
    const {isLight}: AppThemeContext = useContext(ThemeContext)
    const cardClasses: Array<string> = ['panel', 'panel-default', isLight ? 'background-light' : 'background-dark']

    return (
        <div className="row history-container">
            <div className="col-md-11 center-block pl-0 pr-0">
                <div className={cardClasses.join(' ')}>
                    <div className="panel-heading"><h3>Используемые технологии</h3></div>
                    <div className="panel-body">
                        <p className="block-name">Общие данные</p>
                        <p>Frontend сайта написан на React, backend на Spring framework.</p>
                        <p>Чем обусловлен выбор данных технологий? React - это библиотека JavaScript, разработанная
                            компанией Facebook в 2013 году, отлично подходящая для создания
                            огромных веб-приложений, где данные могут меняться на регулярной основе. К его плюсам можно
                            отнести:</p>
                        <ul>
                            <li>Легок в изучении. React легко учится ввиду простоты его синтаксиса</li>
                            <li>Использование Virtual DOM, позволяющее повысить производительность высоконагруженных
                                приложений
                            </li>
                            <li>Использование компонентного подхода, благодаря чему возможно переиспользование одного и
                                того же
                                кода
                            </li>
                            <li>Как правило, очень простая миграция между версиями</li>
                        </ul>
                        <p>Spring — один из широко используемых фреймворков для разработки
                            enterprise-приложений, написанный на языке Java. Целью создания данного фреймворка
                            стало желание упростить разработку приложений на популярном Java EE стеке
                            технологий от компании Oracle. К его примуществам можно отнести:</p>
                        <ul>
                            <li>Относительная легкость в изучении и применении фреймворка в разработке и поддержке
                                приложения
                            </li>
                            <li>Внедрение зависимостей (DI) и инверсия управления (IoC), позволяющие писать независимые
                                друг от друга компоненты, что дает улучшение в командной разработке, переносимости
                                модулей и т.д.
                            </li>
                            <li>Управляет жизненным циклом Spring Bean с помощью Spring IoC контейнер
                            </li>
                            <li>Проект Spring содержит в себе множество подпроектов, которые затрагивают важные части
                                создания софта, такие как вебсервисы, веб программирование, работа с базами данных,
                                загрузка файлов, обработка ошибок и многое другое
                            </li>
                        </ul>
                        <p className="block-name">React</p>
                        <img src={reactLogo} className="history-img" alt="reactLogo"/>
                        <p>На данный момент используется React версии 16.13. Благодаря практически полной поддержке всех
                            жизненных методов компонента с помощью hooks, проект полностью состоит из функциональных
                            компонентов (исключением является ErrorBoundary, так как аналога метода componentDidCatch()
                            в виде хука пока не реализовано). Плюсом данного подхода можно считать то, что проект тратит
                            меньше ресурсов, нежели используя классовые компоненты.</p>
                        <p>Роутинг в приложении осуществляется с помощью <i>react-router-dom</i>.</p>
                        <p>Для контроля ввода форм и обработки ее полей используется <i>redux-form</i>.</p>
                        <p>Единое состояние приложения контролируется библиотекой <i>redux</i>. Изменение состояния,
                            связанного с возникновением side-эффектов, осуществляется дополнительно с
                            помощью библиотек <i>redux-thunk</i> и <i>redux-saga</i>.</p>
                        <p>Во многом, за стилистику и позиционирование элементов в приложении во многом
                            отвечает библиотека компании twitter, а именно <i>bootstrap</i>.</p>
                        <p>Сборщиком приложения является webpack версии 4.0.</p>
                        <p className="block-name">Spring + Hibernate</p>
                        <img src={springLogo} className="history-img spring" alt="springLogo"/>
                        <p>На данный момент используется Spring версии 5.1.</p>
                        <p>За аутентификацию пользователей в приложении используется фреймворк <i>Spring Security</i>.
                            При авторизации пользователю выдаётся JWT-токен, срок действия которого составляет 10 дней.
                            По истечении этого срока необходима повторная авторизация. Авторизованность пользователей
                            определяется наличием валидного JWT-токена в заголовке запроса.</p>
                        <p>Непосредственно за серверную составляющую приложения отвечает фреймворк <i>Spring MVC</i>,
                            который разбит на следующие слои: controllers, services, dao. Контроллеры "читают" запросы
                            к серверу и обращаются к соответствующему сервису. Spring Security при этом ограничивает
                            доступ к ресурсам, недоступным пользователю. Сервисы обращаются к слою ДАО, где и происходит
                            непосредственное написание HQL-запросов, запрос в базу данных и возврат результатов запроса.
                        </p>
                        <p>В качестве базы данных используется <i>Postgres</i>, ввиду своей легкости и доступности. Для
                            обращения к базе данных используется технология <i>Hibernate</i>.</p>
                        <p>Файловая структура приложения подробно расписана на <NavLink
                            to="/project-struct">этой</NavLink> странице.</p>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default Technologies